'''
Задача №45.
Два различных натуральных числа n и m называются дружественными, если сумма
делителей числа n (включая 1, но исключая само n) равна числу m и наоборот.
Например, 220 и 284 – дружественные числа. По данному числу k выведите все
пары дружественных чисел, каждое из которых не превосходит k. Программа
получает на вход одно натуральное число k, не превосходящее 10⁵. Программа
должна вывести все пары дружественных чисел, каждое из которых не
превосходит k. Пары необходимо выводить по одной в строке, разделяя пробелами.
Каждая пара должна быть выведена только один раз (перестановка чисел новую
пару не дает).
Дружественные числа были открыты последователями Пифагора; правда, им удалось
найти только одну пару дружественных чисел — 220 и 284.
Список делителей для 220:
1, 2, 4, 5, 10, 11, 20, 22, 44, 55 и 110, — их сумма равна 284.
Список делителей для 284:
1, 2, 4, 71 и 142, — и сумма равна 220.
Пары дружественных чисел, меньших 100 000.
220 284 (Пифагор, ~500 до н.э.)   17296  18416 (Ибн ал-Банна, ~1300)
1184  1210  (Паганини, 1860)      63020  76084 (Эйлер, 1747)
2620  2924  (Эйлер, 1747)         66928  66992 (Эйлер, 1750)
5020  5564  (Эйлер, 1747)         67095  71145 (Эйлер, 1747)
6232  6368  (Эйлер, 1750)         69615  87633 (Эйлер, 1747)
10744 10856 (Эйлер, 1747)         79750  88730 (Рольф, 1964)
12285 14595 (Браун, 1939)
---------------------------------------
Input: 300   -> Output: 220 284
'''
import time


def amicably_numbers(n: int) -> None:
    # Словарь для хранения - Число: Сумма_делителей
    d = dict()
    # Берем каждое число от 1 до n
    for i in range(1, n):
        # Считаем сумму делителей для этого числа
        s = 1
        # Если число нечетное, убираем из перебора четные числа
        if i % 2:
            s = 2
        sum_div = sum([k for k in range(1, i // 2 + 1, s) if i % k == 0])
        # Если сумма делителей не равно 1 и больше чем половина числа
        if sum_div != 1 and sum_div > i // 3 * 2:
            # Добавляем в словарь число и сумму делителей
            d[i] = sum_div
        # Если сумма больше числа и
        # для суммы есть такое же число по значению в словаре и
        # оно равно числу
        if sum_div < i and sum_div in d and d[sum_div] == i:
            # Выводим на печать такие значения
            print(sum_div, i)


def amicable_numbers2(n: int) -> None:
    lst = []
    for i in range(1, n):
        s = 1
        if i % 2:
            s = 2
        digit = sum([k for k in range(1, i // 2 + 1, s) if i % k == 0])
        if digit != 1 and digit > i // 3 * 2:
            lst.append((i, digit))
    print(*(key for (key, value) in lst if (
        value, key) in lst and key != value))


num = 20000

start = time.time()
amicably_numbers(num)
print(f'Время выполнения со словарем: {time.time() - start}')

start = time.time()
amicable_numbers2(num)
print(f'Время выполнения со списком: {time.time() - start}')
